<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="errorWrongCardName" xml:space="preserve">
    <value>Card Name must contain a text!</value>
  </data>
  <data name="errorWrongCardQuality" xml:space="preserve">
    <value>Wrong card quality</value>
  </data>
  <data name="errorWrongCardSet" xml:space="preserve">
    <value>Wrong card set</value>
  </data>
  <data name="errorWrongCardType" xml:space="preserve">
    <value>Wrong card type</value>
  </data>
  <data name="errorWrongHeroClass" xml:space="preserve">
    <value>Wrong hero class</value>
  </data>
  <data name="errorWrongMinionRace" xml:space="preserve">
    <value>Wrong minion race</value>
  </data>
  <data name="errorWrongPathCurve" xml:space="preserve">
    <value>Wrong PathCurve type found!</value>
  </data>
  <data name="strAttack" xml:space="preserve">
    <value>Attack</value>
  </data>
  <data name="strBasic" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="strBeast" xml:space="preserve">
    <value>Beast</value>
  </data>
  <data name="strBRM" xml:space="preserve">
    <value>Black Rock Mountain</value>
  </data>
  <data name="strCancelProcess" xml:space="preserve">
    <value>Cancel Process</value>
  </data>
  <data name="strChooseDestination" xml:space="preserve">
    <value>Choose Destination Folder</value>
  </data>
  <data name="strClass" xml:space="preserve">
    <value>Hero Class</value>
  </data>
  <data name="strClassic" xml:space="preserve">
    <value>Classic</value>
  </data>
  <data name="strCollectionSuccess" xml:space="preserve">
    <value>Collection created successfully</value>
  </data>
  <data name="strCommon" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="strCost" xml:space="preserve">
    <value>Cost</value>
  </data>
  <data name="strCreateCards" xml:space="preserve">
    <value>Create Cards</value>
  </data>
  <data name="strCreateCollection" xml:space="preserve">
    <value>Create Collection</value>
  </data>
  <data name="strCreateCustom" xml:space="preserve">
    <value>Create Card</value>
  </data>
  <data name="strCustom" xml:space="preserve">
    <value>Custom:</value>
  </data>
  <data name="strDamage" xml:space="preserve">
    <value>Damage</value>
  </data>
  <data name="strDemon" xml:space="preserve">
    <value>Demon</value>
  </data>
  <data name="strDragon" xml:space="preserve">
    <value>Dragon</value>
  </data>
  <data name="strDruid" xml:space="preserve">
    <value>Druid</value>
  </data>
  <data name="strDurability" xml:space="preserve">
    <value>Durability</value>
  </data>
  <data name="strEpic" xml:space="preserve">
    <value>Epic</value>
  </data>
  <data name="strFree" xml:space="preserve">
    <value>Free</value>
  </data>
  <data name="strGvG" xml:space="preserve">
    <value>Goblins vs Gnomes</value>
  </data>
  <data name="strHealth" xml:space="preserve">
    <value>Health</value>
  </data>
  <data name="strHunter" xml:space="preserve">
    <value>Hunter</value>
  </data>
  <data name="strImageFolder" xml:space="preserve">
    <value>Choose Image Folder</value>
  </data>
  <data name="strLegendary" xml:space="preserve">
    <value>Legendary</value>
  </data>
  <data name="strMage" xml:space="preserve">
    <value>Mage</value>
  </data>
  <data name="strMech" xml:space="preserve">
    <value>Mech</value>
  </data>
  <data name="strMinion" xml:space="preserve">
    <value>Minion</value>
  </data>
  <data name="strMurloc" xml:space="preserve">
    <value>Murloc</value>
  </data>
  <data name="strName" xml:space="preserve">
    <value>Card Name</value>
  </data>
  <data name="strNax" xml:space="preserve">
    <value>The Curse of Naxxramas</value>
  </data>
  <data name="strNeutral" xml:space="preserve">
    <value>Neutral</value>
  </data>
  <data name="strNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="strOpenJSONFile" xml:space="preserve">
    <value>Open JSON File</value>
  </data>
  <data name="strOutputSize" xml:space="preserve">
    <value>Output Size:</value>
  </data>
  <data name="strPaladin" xml:space="preserve">
    <value>Paladin</value>
  </data>
  <data name="strPirate" xml:space="preserve">
    <value>Pirate</value>
  </data>
  <data name="strPriest" xml:space="preserve">
    <value>Priest</value>
  </data>
  <data name="strProcessingLocale" xml:space="preserve">
    <value>Creating Locale</value>
  </data>
  <data name="strQuality" xml:space="preserve">
    <value>Card Quality</value>
  </data>
  <data name="strRace" xml:space="preserve">
    <value>Minion Race</value>
  </data>
  <data name="strRare" xml:space="preserve">
    <value>Rare</value>
  </data>
  <data name="strRogue" xml:space="preserve">
    <value>Rogue</value>
  </data>
  <data name="strSaveCard" xml:space="preserve">
    <value>Save Card</value>
  </data>
  <data name="strSelectImage" xml:space="preserve">
    <value>Select Card Image</value>
  </data>
  <data name="strSet" xml:space="preserve">
    <value>Card Set</value>
  </data>
  <data name="strShaman" xml:space="preserve">
    <value>Shaman</value>
  </data>
  <data name="strSpell" xml:space="preserve">
    <value>Spell</value>
  </data>
  <data name="strText" xml:space="preserve">
    <value>Card Text (can use HTML tags)</value>
  </data>
  <data name="strTGT" xml:space="preserve">
    <value>The Grand Tournament</value>
  </data>
  <data name="strTotem" xml:space="preserve">
    <value>Totem</value>
  </data>
  <data name="strType" xml:space="preserve">
    <value>Card Type</value>
  </data>
  <data name="strUnknownError" xml:space="preserve">
    <value>An error has ocurred</value>
  </data>
  <data name="strUpdateCard" xml:space="preserve">
    <value>Update Card</value>
  </data>
  <data name="strUserCancel" xml:space="preserve">
    <value>User Canceled process</value>
  </data>
  <data name="strWarlock" xml:space="preserve">
    <value>Warlock</value>
  </data>
  <data name="strWarrior" xml:space="preserve">
    <value>Warrior</value>
  </data>
  <data name="strWeapon" xml:space="preserve">
    <value>Weapon</value>
  </data>
  <data name="strTranslation" xml:space="preserve">
    <value>Hugo Castro</value>
  </data>
  <data name="strJSONParseSuccess" xml:space="preserve">
    <value>JSON file successfully processed</value>
  </data>
  <data name="strJSONProcess" xml:space="preserve">
    <value>Processing file. Please, wait...</value>
  </data>
  <data name="strDefaultPicture" xml:space="preserve">
    <value>Use default picture?</value>
  </data>
  <data name="strNoImage" xml:space="preserve">
    <value>If card portrait not found:</value>
  </data>
  <data name="strNoImageOptions" xml:space="preserve">
    <value>Do not generate card-Use a default image-Leave an empty place</value>
  </data>
  <data name="strStatus" xml:space="preserve">
    <value>Loaded {0} cards with {1} languages</value>
  </data>
  <data name="strLOE" xml:space="preserve">
    <value>League of Explorers</value>
  </data>
  <data name="strWOG" xml:space="preserve">
    <value>Whispers of the Old Gods</value>
  </data>
</root>